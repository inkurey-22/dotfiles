{
  "version": 3,
  "requesterUsername": "inkurey-22",
  "requesterAvatarIconUri": {
    "$mid": 1,
    "path": "/u/146175466",
    "scheme": "https",
    "authority": "avatars.githubusercontent.com",
    "query": "v=4"
  },
  "responderUsername": "GitHub Copilot",
  "responderAvatarIconUri": {
    "id": "copilot"
  },
  "initialLocation": "panel",
  "requests": [
    {
      "requestId": "request_6043cfb4-cbef-4dec-9614-53cc0f362437",
      "message": {
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "extensionId": {
                "value": "GitHub.copilot-chat",
                "_lower": "github.copilot-chat"
              },
              "publisherDisplayName": "GitHub",
              "extensionPublisherId": "GitHub",
              "extensionDisplayName": "GitHub Copilot Chat",
              "id": "github.copilot.workspace",
              "description": "Ask about your workspace",
              "metadata": {
                "sampleRequest": "How do I build this project?",
                "themeIcon": {
                  "id": "code"
                },
                "hasFollowups": true,
                "supportIssueReporting": false
              },
              "name": "workspace",
              "fullName": "Workspace",
              "locations": [
                "panel"
              ],
              "modes": [
                "ask"
              ],
              "slashCommands": [
                {
                  "name": "explain",
                  "description": "Explain how the code in your active editor works"
                },
                {
                  "name": "tests",
                  "description": "Generate unit tests for the selected code",
                  "disambiguation": [
                    {
                      "category": "create_tests",
                      "description": "The user wants to generate unit tests.",
                      "examples": [
                        "Generate tests for my selection using pytest."
                      ]
                    }
                  ]
                },
                {
                  "name": "fix",
                  "description": "Propose a fix for the problems in the selected code",
                  "sampleRequest": "There is a problem in this code. Rewrite the code to show it with the bug fixed."
                },
                {
                  "name": "new",
                  "description": "Scaffold code for a new file or project in a workspace",
                  "sampleRequest": "Create a RESTful API server using typescript",
                  "isSticky": true,
                  "disambiguation": [
                    {
                      "category": "create_new_workspace_or_extension",
                      "description": "The user wants to create a complete Visual Studio Code workspace from scratch, such as a new application or a Visual Studio Code extension. Use this category only if the question relates to generating or creating new workspaces in Visual Studio Code. Do not use this category for updating existing code or generating sample code snippets",
                      "examples": [
                        "Scaffold a Node server.",
                        "Create a sample project which uses the fileSystemProvider API.",
                        "react application"
                      ]
                    }
                  ]
                },
                {
                  "name": "newNotebook",
                  "description": "Create a new Jupyter Notebook",
                  "sampleRequest": "How do I create a notebook to load data from a csv file?",
                  "disambiguation": [
                    {
                      "category": "create_jupyter_notebook",
                      "description": "The user wants to create a new Jupyter notebook in Visual Studio Code.",
                      "examples": [
                        "Create a notebook to analyze this CSV file."
                      ]
                    }
                  ]
                },
                {
                  "name": "setupTests",
                  "description": "Set up tests in your project (Experimental)",
                  "sampleRequest": "add playwright tests to my project",
                  "when": "config.github.copilot.chat.setupTests.enabled",
                  "disambiguation": [
                    {
                      "category": "set_up_tests",
                      "description": "The user wants to configure project test setup, framework, or test runner. The user does not want to fix their existing tests.",
                      "examples": [
                        "Set up tests for this project."
                      ]
                    }
                  ]
                }
              ],
              "disambiguation": [
                {
                  "category": "workspace_project_questions",
                  "description": "The user wants to learn about or update the code or files in their current workspace. Questions in this category may be about understanding what the whole workspace does or locating the implementation of some code. This does not include generating or updating tests.",
                  "examples": [
                    "What does this project do?"
                  ]
                },
                {
                  "category": "find_code_in_workspace",
                  "description": "The user wants to locate the implementation of some functionality in their current workspace.",
                  "examples": [
                    "Where is the tree widget implemented?"
                  ]
                },
                {
                  "category": "generate_with_workspace_context",
                  "description": "The user wants to generate code based on multiple files in the workspace and did not specify which files to reference.",
                  "examples": [
                    "Create a README for this project."
                  ]
                }
              ]
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 11
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 1,
              "endColumn": 12
            },
            "text": " ",
            "kind": "text"
          },
          {
            "range": {
              "start": 11,
              "endExclusive": 17
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 12,
              "endLineNumber": 1,
              "endColumn": 18
            },
            "command": {
              "name": "tests",
              "description": "Generate unit tests for the selected code",
              "disambiguation": [
                {
                  "category": "create_tests",
                  "description": "The user wants to generate unit tests.",
                  "examples": [
                    "Generate tests for my selection using pytest."
                  ]
                }
              ]
            },
            "kind": "subcommand"
          },
          {
            "range": {
              "start": 17,
              "endExclusive": 39
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 18,
              "endLineNumber": 1,
              "endColumn": 40
            },
            "text": " with criterion please",
            "kind": "text"
          }
        ],
        "text": "@workspace /tests with criterion please"
      },
      "variableData": {
        "variables": [
          {
            "kind": "file",
            "id": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/my_str_isnum.c",
            "value": {
              "$mid": 1,
              "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/my_str_isnum.c",
              "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/my_str_isnum.c",
              "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/my_str_isnum.c",
              "scheme": "file"
            },
            "name": "my_str_isnum.c",
            "omittedState": 0
          },
          {
            "kind": "file",
            "id": "vscode.implicit.viewport",
            "name": "file:test_my_str_isnum.c",
            "value": {
              "uri": {
                "$mid": 1,
                "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isnum.c",
                "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isnum.c",
                "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isnum.c",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 1,
                "startColumn": 1,
                "endLineNumber": 8,
                "endColumn": 1
              }
            },
            "modelDescription": "User's current visible code"
          }
        ]
      },
      "response": [
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isnum.c",
            "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isnum.c",
            "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isnum.c",
            "scheme": "file"
          },
          "edits": [
            [
              {
                "text": "\n#include <criterion/criterion.h>",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 33,
                  "endLineNumber": 8,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "\nint my_str_isnum(char const *str);",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 35,
                  "endLineNumber": 10,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "\nTest(my_str_isnum, only_digits)",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 32,
                  "endLineNumber": 12,
                  "endColumn": 32
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_str_isnum(\"1234567890\"), 1);",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 2,
                  "endLineNumber": 13,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 49,
                  "endLineNumber": 14,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 2,
                  "endLineNumber": 15,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_str_isnum, contains_letters)",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 37,
                  "endLineNumber": 17,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_str_isnum(\"123abc456\"), 0);",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 2,
                  "endLineNumber": 18,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 48,
                  "endLineNumber": 19,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 2,
                  "endLineNumber": 20,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_str_isnum, empty_string)",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 33,
                  "endLineNumber": 22,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_str_isnum(\"\"), 1);",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 2,
                  "endLineNumber": 23,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 39,
                  "endLineNumber": 24,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 2,
                  "endLineNumber": 25,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_str_isnum, only_letters)",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 33,
                  "endLineNumber": 27,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_str_isnum(\"abcdef\"), 0);",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 2,
                  "endLineNumber": 28,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 45,
                  "endLineNumber": 29,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 2,
                  "endLineNumber": 30,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_str_isnum, special_characters)",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 39,
                  "endLineNumber": 32,
                  "endColumn": 39
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_str_isnum(\"123!@#\"), 0);",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 2,
                  "endLineNumber": 33,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 45,
                  "endLineNumber": 34,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 2,
                  "endLineNumber": 35,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_str_isnum, negative_number)",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 36,
                  "endLineNumber": 37,
                  "endColumn": 36
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_str_isnum(\"-12345\"), 0);",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 2,
                  "endLineNumber": 38,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 45,
                  "endLineNumber": 39,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 2,
                  "endLineNumber": 40,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_str_isnum, spaces_in_string)",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 37,
                  "endLineNumber": 42,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_str_isnum(\"123 456\"), 0);",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 2,
                  "endLineNumber": 43,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 46,
                  "endLineNumber": 44,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 2,
                  "endLineNumber": 45,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_str_isnum, single_digit)",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 33,
                  "endLineNumber": 47,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_str_isnum(\"7\"), 1);",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 2,
                  "endLineNumber": 48,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 40,
                  "endLineNumber": 49,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 2,
                  "endLineNumber": 50,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_str_isnum, single_non_digit)",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 37,
                  "endLineNumber": 52,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_str_isnum(\"a\"), 0);",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 2,
                  "endLineNumber": 53,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 40,
                  "endLineNumber": 54,
                  "endColumn": 40
                }
              }
            ],
            []
          ]
        }
      ],
      "responseId": "response_52191da1-f617-46a0-b894-1639a51a796e",
      "result": {
        "timings": {
          "totalElapsed": 11795
        },
        "metadata": {
          "codeBlocks": [],
          "modelMessageId": "99a4558e-3964-4f3f-8437-0c754b069465",
          "responseId": "ad83d4de-9215-4eb1-b03e-f3e8653ac455",
          "sessionId": "e2707f7b-b512-47d1-86ef-9892a930bcb7",
          "agentId": "github.copilot.workspace",
          "command": "tests"
        }
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.workspace",
        "description": "Ask about your workspace",
        "metadata": {
          "sampleRequest": "How do I build this project?",
          "themeIcon": {
            "id": "code"
          },
          "hasFollowups": true,
          "supportIssueReporting": false
        },
        "name": "workspace",
        "fullName": "Workspace",
        "locations": [
          "panel"
        ],
        "modes": [
          "ask"
        ],
        "slashCommands": [
          {
            "name": "explain",
            "description": "Explain how the code in your active editor works"
          },
          {
            "name": "tests",
            "description": "Generate unit tests for the selected code",
            "disambiguation": [
              {
                "category": "create_tests",
                "description": "The user wants to generate unit tests.",
                "examples": [
                  "Generate tests for my selection using pytest."
                ]
              }
            ]
          },
          {
            "name": "fix",
            "description": "Propose a fix for the problems in the selected code",
            "sampleRequest": "There is a problem in this code. Rewrite the code to show it with the bug fixed."
          },
          {
            "name": "new",
            "description": "Scaffold code for a new file or project in a workspace",
            "sampleRequest": "Create a RESTful API server using typescript",
            "isSticky": true,
            "disambiguation": [
              {
                "category": "create_new_workspace_or_extension",
                "description": "The user wants to create a complete Visual Studio Code workspace from scratch, such as a new application or a Visual Studio Code extension. Use this category only if the question relates to generating or creating new workspaces in Visual Studio Code. Do not use this category for updating existing code or generating sample code snippets",
                "examples": [
                  "Scaffold a Node server.",
                  "Create a sample project which uses the fileSystemProvider API.",
                  "react application"
                ]
              }
            ]
          },
          {
            "name": "newNotebook",
            "description": "Create a new Jupyter Notebook",
            "sampleRequest": "How do I create a notebook to load data from a csv file?",
            "disambiguation": [
              {
                "category": "create_jupyter_notebook",
                "description": "The user wants to create a new Jupyter notebook in Visual Studio Code.",
                "examples": [
                  "Create a notebook to analyze this CSV file."
                ]
              }
            ]
          },
          {
            "name": "setupTests",
            "description": "Set up tests in your project (Experimental)",
            "sampleRequest": "add playwright tests to my project",
            "when": "config.github.copilot.chat.setupTests.enabled",
            "disambiguation": [
              {
                "category": "set_up_tests",
                "description": "The user wants to configure project test setup, framework, or test runner. The user does not want to fix their existing tests.",
                "examples": [
                  "Set up tests for this project."
                ]
              }
            ]
          }
        ],
        "disambiguation": [
          {
            "category": "workspace_project_questions",
            "description": "The user wants to learn about or update the code or files in their current workspace. Questions in this category may be about understanding what the whole workspace does or locating the implementation of some code. This does not include generating or updating tests.",
            "examples": [
              "What does this project do?"
            ]
          },
          {
            "category": "find_code_in_workspace",
            "description": "The user wants to locate the implementation of some functionality in their current workspace.",
            "examples": [
              "Where is the tree widget implemented?"
            ]
          },
          {
            "category": "generate_with_workspace_context",
            "description": "The user wants to generate code based on multiple files in the workspace and did not specify which files to reference.",
            "examples": [
              "Create a README for this project."
            ]
          }
        ]
      },
      "slashCommand": {
        "name": "tests",
        "description": "Generate unit tests for the selected code",
        "disambiguation": [
          {
            "category": "create_tests",
            "description": "The user wants to generate unit tests.",
            "examples": [
              "Generate tests for my selection using pytest."
            ]
          }
        ]
      },
      "contentReferences": [
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/my_str_isnum.c",
            "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/my_str_isnum.c",
            "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/my_str_isnum.c",
            "scheme": "file"
          }
        },
        {
          "kind": "reference",
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isnum.c",
              "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isnum.c",
              "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isnum.c",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 8,
              "endColumn": 1
            }
          }
        }
      ],
      "codeCitations": [],
      "timestamp": 1749404103972
    },
    {
      "requestId": "request_69e63eeb-9969-4d9d-9776-2c9e42e09a2b",
      "message": {
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 10
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 11
            },
            "agent": {
              "extensionId": {
                "value": "GitHub.copilot-chat",
                "_lower": "github.copilot-chat"
              },
              "publisherDisplayName": "GitHub",
              "extensionPublisherId": "GitHub",
              "extensionDisplayName": "GitHub Copilot Chat",
              "id": "github.copilot.workspace",
              "description": "Ask about your workspace",
              "metadata": {
                "sampleRequest": "How do I build this project?",
                "themeIcon": {
                  "id": "code"
                },
                "hasFollowups": true,
                "supportIssueReporting": false
              },
              "name": "workspace",
              "fullName": "Workspace",
              "locations": [
                "panel"
              ],
              "modes": [
                "ask"
              ],
              "slashCommands": [
                {
                  "name": "explain",
                  "description": "Explain how the code in your active editor works"
                },
                {
                  "name": "tests",
                  "description": "Generate unit tests for the selected code",
                  "disambiguation": [
                    {
                      "category": "create_tests",
                      "description": "The user wants to generate unit tests.",
                      "examples": [
                        "Generate tests for my selection using pytest."
                      ]
                    }
                  ]
                },
                {
                  "name": "fix",
                  "description": "Propose a fix for the problems in the selected code",
                  "sampleRequest": "There is a problem in this code. Rewrite the code to show it with the bug fixed."
                },
                {
                  "name": "new",
                  "description": "Scaffold code for a new file or project in a workspace",
                  "sampleRequest": "Create a RESTful API server using typescript",
                  "isSticky": true,
                  "disambiguation": [
                    {
                      "category": "create_new_workspace_or_extension",
                      "description": "The user wants to create a complete Visual Studio Code workspace from scratch, such as a new application or a Visual Studio Code extension. Use this category only if the question relates to generating or creating new workspaces in Visual Studio Code. Do not use this category for updating existing code or generating sample code snippets",
                      "examples": [
                        "Scaffold a Node server.",
                        "Create a sample project which uses the fileSystemProvider API.",
                        "react application"
                      ]
                    }
                  ]
                },
                {
                  "name": "newNotebook",
                  "description": "Create a new Jupyter Notebook",
                  "sampleRequest": "How do I create a notebook to load data from a csv file?",
                  "disambiguation": [
                    {
                      "category": "create_jupyter_notebook",
                      "description": "The user wants to create a new Jupyter notebook in Visual Studio Code.",
                      "examples": [
                        "Create a notebook to analyze this CSV file."
                      ]
                    }
                  ]
                },
                {
                  "name": "setupTests",
                  "description": "Set up tests in your project (Experimental)",
                  "sampleRequest": "add playwright tests to my project",
                  "when": "config.github.copilot.chat.setupTests.enabled",
                  "disambiguation": [
                    {
                      "category": "set_up_tests",
                      "description": "The user wants to configure project test setup, framework, or test runner. The user does not want to fix their existing tests.",
                      "examples": [
                        "Set up tests for this project."
                      ]
                    }
                  ]
                }
              ],
              "disambiguation": [
                {
                  "category": "workspace_project_questions",
                  "description": "The user wants to learn about or update the code or files in their current workspace. Questions in this category may be about understanding what the whole workspace does or locating the implementation of some code. This does not include generating or updating tests.",
                  "examples": [
                    "What does this project do?"
                  ]
                },
                {
                  "category": "find_code_in_workspace",
                  "description": "The user wants to locate the implementation of some functionality in their current workspace.",
                  "examples": [
                    "Where is the tree widget implemented?"
                  ]
                },
                {
                  "category": "generate_with_workspace_context",
                  "description": "The user wants to generate code based on multiple files in the workspace and did not specify which files to reference.",
                  "examples": [
                    "Create a README for this project."
                  ]
                }
              ]
            },
            "kind": "agent"
          },
          {
            "range": {
              "start": 10,
              "endExclusive": 11
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 11,
              "endLineNumber": 1,
              "endColumn": 12
            },
            "text": " ",
            "kind": "text"
          },
          {
            "range": {
              "start": 11,
              "endExclusive": 17
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 12,
              "endLineNumber": 1,
              "endColumn": 18
            },
            "command": {
              "name": "tests",
              "description": "Generate unit tests for the selected code",
              "disambiguation": [
                {
                  "category": "create_tests",
                  "description": "The user wants to generate unit tests.",
                  "examples": [
                    "Generate tests for my selection using pytest."
                  ]
                }
              ]
            },
            "kind": "subcommand"
          },
          {
            "range": {
              "start": 17,
              "endExclusive": 18
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 18,
              "endLineNumber": 1,
              "endColumn": 19
            },
            "text": " ",
            "kind": "text"
          }
        ],
        "text": "@workspace /tests "
      },
      "variableData": {
        "variables": [
          {
            "kind": "file",
            "id": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/my_str_isupper.c",
            "value": {
              "$mid": 1,
              "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/my_str_isupper.c",
              "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/my_str_isupper.c",
              "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/my_str_isupper.c",
              "scheme": "file"
            },
            "name": "my_str_isupper.c",
            "omittedState": 0
          },
          {
            "kind": "file",
            "id": "vscode.implicit.viewport",
            "name": "file:test_my_str_isupper.c",
            "value": {
              "uri": {
                "$mid": 1,
                "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isupper.c",
                "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isupper.c",
                "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isupper.c",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 1,
                "startColumn": 1,
                "endLineNumber": 8,
                "endColumn": 1
              }
            },
            "modelDescription": "User's current visible code"
          }
        ]
      },
      "response": [
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isupper.c",
            "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isupper.c",
            "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isupper.c",
            "scheme": "file"
          },
          "edits": [
            [
              {
                "text": "\n#include <criterion/criterion.h>",
                "range": {
                  "startLineNumber": 7,
                  "startColumn": 1,
                  "endLineNumber": 7,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 8,
                  "startColumn": 33,
                  "endLineNumber": 8,
                  "endColumn": 33
                }
              }
            ],
            [
              {
                "text": "\nint my_str_isupper(char const *str);",
                "range": {
                  "startLineNumber": 9,
                  "startColumn": 1,
                  "endLineNumber": 9,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 10,
                  "startColumn": 37,
                  "endLineNumber": 10,
                  "endColumn": 37
                }
              }
            ],
            [
              {
                "text": "\nTest(my_str_isupper, only_uppercase_letters)",
                "range": {
                  "startLineNumber": 11,
                  "startColumn": 1,
                  "endLineNumber": 11,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 12,
                  "startColumn": 45,
                  "endLineNumber": 12,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_str_isupper(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"), 1);",
                "range": {
                  "startLineNumber": 13,
                  "startColumn": 2,
                  "endLineNumber": 13,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 14,
                  "startColumn": 67,
                  "endLineNumber": 14,
                  "endColumn": 67
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 15,
                  "startColumn": 2,
                  "endLineNumber": 15,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_str_isupper, contains_lowercase_letters)",
                "range": {
                  "startLineNumber": 16,
                  "startColumn": 1,
                  "endLineNumber": 16,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 17,
                  "startColumn": 49,
                  "endLineNumber": 17,
                  "endColumn": 49
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_str_isupper(\"ABCdefGHI\"), 0);",
                "range": {
                  "startLineNumber": 18,
                  "startColumn": 2,
                  "endLineNumber": 18,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 19,
                  "startColumn": 50,
                  "endLineNumber": 19,
                  "endColumn": 50
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 20,
                  "startColumn": 2,
                  "endLineNumber": 20,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_str_isupper, empty_string)",
                "range": {
                  "startLineNumber": 21,
                  "startColumn": 1,
                  "endLineNumber": 21,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 22,
                  "startColumn": 35,
                  "endLineNumber": 22,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_str_isupper(\"\"), 1);",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 2,
                  "endLineNumber": 23,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 41,
                  "endLineNumber": 24,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 2,
                  "endLineNumber": 25,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_str_isupper, only_lowercase_letters)",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 1,
                  "endLineNumber": 26,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 45,
                  "endLineNumber": 27,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_str_isupper(\"abcdef\"), 0);",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 2,
                  "endLineNumber": 28,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 47,
                  "endLineNumber": 29,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 2,
                  "endLineNumber": 30,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_str_isupper, special_characters)",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 1,
                  "endLineNumber": 31,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 41,
                  "endLineNumber": 32,
                  "endColumn": 41
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_str_isupper(\"ABC!@#\"), 0);",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 2,
                  "endLineNumber": 33,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 47,
                  "endLineNumber": 34,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 2,
                  "endLineNumber": 35,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_str_isupper, single_uppercase_letter)",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 1,
                  "endLineNumber": 36,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 46,
                  "endLineNumber": 37,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_str_isupper(\"Z\"), 1);",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 2,
                  "endLineNumber": 38,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 42,
                  "endLineNumber": 39,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 2,
                  "endLineNumber": 40,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_str_isupper, single_lowercase_letter)",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 1,
                  "endLineNumber": 41,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 46,
                  "endLineNumber": 42,
                  "endColumn": 46
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_str_isupper(\"z\"), 0);",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 2,
                  "endLineNumber": 43,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 42,
                  "endLineNumber": 44,
                  "endColumn": 42
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 2,
                  "endLineNumber": 45,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_str_isupper, numbers_in_string)",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 1,
                  "endLineNumber": 46,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 40,
                  "endLineNumber": 47,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_str_isupper(\"ABC123\"), 0);",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 2,
                  "endLineNumber": 48,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 47,
                  "endLineNumber": 49,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 2,
                  "endLineNumber": 50,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_str_isupper, space_in_string)",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 1,
                  "endLineNumber": 51,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 38,
                  "endLineNumber": 52,
                  "endColumn": 38
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_str_isupper(\"ABC DEF\"), 0);",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 2,
                  "endLineNumber": 53,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 48,
                  "endLineNumber": 54,
                  "endColumn": 48
                }
              }
            ],
            []
          ]
        }
      ],
      "responseId": "response_05724137-4eed-4b86-b65e-a7373a8e3af0",
      "result": {
        "timings": {
          "totalElapsed": 5200
        },
        "metadata": {
          "codeBlocks": [],
          "modelMessageId": "6f39bbfe-e5c9-4e81-b328-c65b8a4dd690",
          "responseId": "6ee0e682-a22a-4149-a5d1-92e16d6275db",
          "sessionId": "e2707f7b-b512-47d1-86ef-9892a930bcb7",
          "agentId": "github.copilot.workspace",
          "command": "tests"
        }
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.workspace",
        "description": "Ask about your workspace",
        "metadata": {
          "sampleRequest": "How do I build this project?",
          "themeIcon": {
            "id": "code"
          },
          "hasFollowups": true,
          "supportIssueReporting": false
        },
        "name": "workspace",
        "fullName": "Workspace",
        "locations": [
          "panel"
        ],
        "modes": [
          "ask"
        ],
        "slashCommands": [
          {
            "name": "explain",
            "description": "Explain how the code in your active editor works"
          },
          {
            "name": "tests",
            "description": "Generate unit tests for the selected code",
            "disambiguation": [
              {
                "category": "create_tests",
                "description": "The user wants to generate unit tests.",
                "examples": [
                  "Generate tests for my selection using pytest."
                ]
              }
            ]
          },
          {
            "name": "fix",
            "description": "Propose a fix for the problems in the selected code",
            "sampleRequest": "There is a problem in this code. Rewrite the code to show it with the bug fixed."
          },
          {
            "name": "new",
            "description": "Scaffold code for a new file or project in a workspace",
            "sampleRequest": "Create a RESTful API server using typescript",
            "isSticky": true,
            "disambiguation": [
              {
                "category": "create_new_workspace_or_extension",
                "description": "The user wants to create a complete Visual Studio Code workspace from scratch, such as a new application or a Visual Studio Code extension. Use this category only if the question relates to generating or creating new workspaces in Visual Studio Code. Do not use this category for updating existing code or generating sample code snippets",
                "examples": [
                  "Scaffold a Node server.",
                  "Create a sample project which uses the fileSystemProvider API.",
                  "react application"
                ]
              }
            ]
          },
          {
            "name": "newNotebook",
            "description": "Create a new Jupyter Notebook",
            "sampleRequest": "How do I create a notebook to load data from a csv file?",
            "disambiguation": [
              {
                "category": "create_jupyter_notebook",
                "description": "The user wants to create a new Jupyter notebook in Visual Studio Code.",
                "examples": [
                  "Create a notebook to analyze this CSV file."
                ]
              }
            ]
          },
          {
            "name": "setupTests",
            "description": "Set up tests in your project (Experimental)",
            "sampleRequest": "add playwright tests to my project",
            "when": "config.github.copilot.chat.setupTests.enabled",
            "disambiguation": [
              {
                "category": "set_up_tests",
                "description": "The user wants to configure project test setup, framework, or test runner. The user does not want to fix their existing tests.",
                "examples": [
                  "Set up tests for this project."
                ]
              }
            ]
          }
        ],
        "disambiguation": [
          {
            "category": "workspace_project_questions",
            "description": "The user wants to learn about or update the code or files in their current workspace. Questions in this category may be about understanding what the whole workspace does or locating the implementation of some code. This does not include generating or updating tests.",
            "examples": [
              "What does this project do?"
            ]
          },
          {
            "category": "find_code_in_workspace",
            "description": "The user wants to locate the implementation of some functionality in their current workspace.",
            "examples": [
              "Where is the tree widget implemented?"
            ]
          },
          {
            "category": "generate_with_workspace_context",
            "description": "The user wants to generate code based on multiple files in the workspace and did not specify which files to reference.",
            "examples": [
              "Create a README for this project."
            ]
          }
        ]
      },
      "slashCommand": {
        "name": "tests",
        "description": "Generate unit tests for the selected code",
        "disambiguation": [
          {
            "category": "create_tests",
            "description": "The user wants to generate unit tests.",
            "examples": [
              "Generate tests for my selection using pytest."
            ]
          }
        ]
      },
      "contentReferences": [
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/my_str_isupper.c",
            "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/my_str_isupper.c",
            "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/my_str_isupper.c",
            "scheme": "file"
          }
        },
        {
          "kind": "reference",
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isupper.c",
              "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isupper.c",
              "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isupper.c",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 8,
              "endColumn": 1
            }
          }
        }
      ],
      "codeCitations": [],
      "timestamp": 1749404222870,
      "editedFileEvents": [
        {
          "eventKind": 1,
          "uri": {
            "$mid": 1,
            "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isnum.c",
            "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isnum.c",
            "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isnum.c",
            "scheme": "file"
          }
        }
      ]
    },
    {
      "requestId": "request_a8e2eda9-eead-4dfb-9e2c-d30e8b4a932a",
      "message": {
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 74
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 75
            },
            "text": "my_strcmp.c                                   12       9    75%   14,16,18",
            "kind": "text"
          }
        ],
        "text": "my_strcmp.c                                   12       9    75%   14,16,18"
      },
      "variableData": {
        "variables": [
          {
            "kind": "file",
            "id": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strcmp.c",
            "value": {
              "$mid": 1,
              "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strcmp.c",
              "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strcmp.c",
              "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strcmp.c",
              "scheme": "file"
            },
            "name": "test_my_strcmp.c",
            "omittedState": 0
          },
          {
            "kind": "file",
            "id": "vscode.implicit.viewport",
            "name": "file:my_strcmp.c",
            "value": {
              "uri": {
                "$mid": 1,
                "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/my_strcmp.c",
                "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/my_strcmp.c",
                "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/my_strcmp.c",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 1,
                "startColumn": 1,
                "endLineNumber": 26,
                "endColumn": 1
              }
            },
            "modelDescription": "User's current visible code"
          }
        ]
      },
      "response": [
        {
          "kind": "textEditGroup",
          "uri": {
            "$mid": 1,
            "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strcmp.c",
            "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strcmp.c",
            "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strcmp.c",
            "scheme": "file"
          },
          "edits": [
            [
              {
                "text": "Test(my_strcmp, both_null)",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 1,
                  "endLineNumber": 23,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 23,
                  "startColumn": 27,
                  "endLineNumber": 23,
                  "endColumn": 27
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_strcmp(NULL, NULL), 0);",
                "range": {
                  "startLineNumber": 24,
                  "startColumn": 2,
                  "endLineNumber": 24,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 25,
                  "startColumn": 44,
                  "endLineNumber": 25,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 26,
                  "startColumn": 2,
                  "endLineNumber": 26,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_strcmp, first_null)",
                "range": {
                  "startLineNumber": 27,
                  "startColumn": 1,
                  "endLineNumber": 27,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 28,
                  "startColumn": 28,
                  "endLineNumber": 28,
                  "endColumn": 28
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_strcmp(NULL, \"abc\"), -'a');",
                "range": {
                  "startLineNumber": 29,
                  "startColumn": 2,
                  "endLineNumber": 29,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 30,
                  "startColumn": 48,
                  "endLineNumber": 30,
                  "endColumn": 48
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 31,
                  "startColumn": 2,
                  "endLineNumber": 31,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_strcmp, second_null)",
                "range": {
                  "startLineNumber": 32,
                  "startColumn": 1,
                  "endLineNumber": 32,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 33,
                  "startColumn": 29,
                  "endLineNumber": 33,
                  "endColumn": 29
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_strcmp(\"abc\", NULL), 'a');",
                "range": {
                  "startLineNumber": 34,
                  "startColumn": 2,
                  "endLineNumber": 34,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 35,
                  "startColumn": 47,
                  "endLineNumber": 35,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 36,
                  "startColumn": 2,
                  "endLineNumber": 36,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_strcmp, empty_strings)",
                "range": {
                  "startLineNumber": 37,
                  "startColumn": 1,
                  "endLineNumber": 37,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 38,
                  "startColumn": 31,
                  "endLineNumber": 38,
                  "endColumn": 31
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_strcmp(\"\", \"\"), 0);",
                "range": {
                  "startLineNumber": 39,
                  "startColumn": 2,
                  "endLineNumber": 39,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 40,
                  "startColumn": 40,
                  "endLineNumber": 40,
                  "endColumn": 40
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 41,
                  "startColumn": 2,
                  "endLineNumber": 41,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_strcmp, first_empty_second_nonempty)",
                "range": {
                  "startLineNumber": 42,
                  "startColumn": 1,
                  "endLineNumber": 42,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 43,
                  "startColumn": 45,
                  "endLineNumber": 43,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_strcmp(\"\", \"a\"), -'a');",
                "range": {
                  "startLineNumber": 44,
                  "startColumn": 2,
                  "endLineNumber": 44,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 45,
                  "startColumn": 44,
                  "endLineNumber": 45,
                  "endColumn": 44
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 46,
                  "startColumn": 2,
                  "endLineNumber": 46,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_strcmp, first_nonempty_second_empty)",
                "range": {
                  "startLineNumber": 47,
                  "startColumn": 1,
                  "endLineNumber": 47,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 48,
                  "startColumn": 45,
                  "endLineNumber": 48,
                  "endColumn": 45
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_eq(my_strcmp(\"a\", \"\"), 'a');",
                "range": {
                  "startLineNumber": 49,
                  "startColumn": 2,
                  "endLineNumber": 49,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 50,
                  "startColumn": 43,
                  "endLineNumber": 50,
                  "endColumn": 43
                }
              }
            ],
            [
              {
                "text": "\n",
                "range": {
                  "startLineNumber": 51,
                  "startColumn": 2,
                  "endLineNumber": 51,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\nTest(my_strcmp, different_lengths)",
                "range": {
                  "startLineNumber": 52,
                  "startColumn": 1,
                  "endLineNumber": 52,
                  "endColumn": 1
                }
              }
            ],
            [
              {
                "text": "\n{",
                "range": {
                  "startLineNumber": 53,
                  "startColumn": 35,
                  "endLineNumber": 53,
                  "endColumn": 35
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_lt(my_strcmp(\"abc\", \"abcd\"), 0);",
                "range": {
                  "startLineNumber": 54,
                  "startColumn": 2,
                  "endLineNumber": 54,
                  "endColumn": 2
                }
              }
            ],
            [
              {
                "text": "\n    cr_assert_gt(my_strcmp(\"abcd\", \"abc\"), 0);",
                "range": {
                  "startLineNumber": 55,
                  "startColumn": 47,
                  "endLineNumber": 55,
                  "endColumn": 47
                }
              }
            ],
            [
              {
                "text": "\n}",
                "range": {
                  "startLineNumber": 56,
                  "startColumn": 47,
                  "endLineNumber": 56,
                  "endColumn": 47
                }
              }
            ],
            []
          ]
        }
      ],
      "responseId": "response_76d0fdf2-1c97-43d0-9dd7-4d552b08dfa7",
      "result": {
        "timings": {
          "totalElapsed": 3762
        },
        "metadata": {
          "codeBlocks": [],
          "modelMessageId": "f3b134fe-5e29-42f6-b490-cfc21356f30e",
          "responseId": "0451b7d5-4cae-4441-80ca-621361b1341c",
          "sessionId": "e2707f7b-b512-47d1-86ef-9892a930bcb7",
          "agentId": "github.copilot.workspace",
          "command": "tests"
        }
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.workspace",
        "description": "Ask about your workspace",
        "metadata": {
          "sampleRequest": "How do I build this project?",
          "themeIcon": {
            "id": "code"
          },
          "hasFollowups": true,
          "supportIssueReporting": false
        },
        "name": "workspace",
        "fullName": "Workspace",
        "locations": [
          "panel"
        ],
        "modes": [
          "ask"
        ],
        "slashCommands": [
          {
            "name": "explain",
            "description": "Explain how the code in your active editor works"
          },
          {
            "name": "tests",
            "description": "Generate unit tests for the selected code",
            "disambiguation": [
              {
                "category": "create_tests",
                "description": "The user wants to generate unit tests.",
                "examples": [
                  "Generate tests for my selection using pytest."
                ]
              }
            ]
          },
          {
            "name": "fix",
            "description": "Propose a fix for the problems in the selected code",
            "sampleRequest": "There is a problem in this code. Rewrite the code to show it with the bug fixed."
          },
          {
            "name": "new",
            "description": "Scaffold code for a new file or project in a workspace",
            "sampleRequest": "Create a RESTful API server using typescript",
            "isSticky": true,
            "disambiguation": [
              {
                "category": "create_new_workspace_or_extension",
                "description": "The user wants to create a complete Visual Studio Code workspace from scratch, such as a new application or a Visual Studio Code extension. Use this category only if the question relates to generating or creating new workspaces in Visual Studio Code. Do not use this category for updating existing code or generating sample code snippets",
                "examples": [
                  "Scaffold a Node server.",
                  "Create a sample project which uses the fileSystemProvider API.",
                  "react application"
                ]
              }
            ]
          },
          {
            "name": "newNotebook",
            "description": "Create a new Jupyter Notebook",
            "sampleRequest": "How do I create a notebook to load data from a csv file?",
            "disambiguation": [
              {
                "category": "create_jupyter_notebook",
                "description": "The user wants to create a new Jupyter notebook in Visual Studio Code.",
                "examples": [
                  "Create a notebook to analyze this CSV file."
                ]
              }
            ]
          },
          {
            "name": "setupTests",
            "description": "Set up tests in your project (Experimental)",
            "sampleRequest": "add playwright tests to my project",
            "when": "config.github.copilot.chat.setupTests.enabled",
            "disambiguation": [
              {
                "category": "set_up_tests",
                "description": "The user wants to configure project test setup, framework, or test runner. The user does not want to fix their existing tests.",
                "examples": [
                  "Set up tests for this project."
                ]
              }
            ]
          }
        ],
        "disambiguation": [
          {
            "category": "workspace_project_questions",
            "description": "The user wants to learn about or update the code or files in their current workspace. Questions in this category may be about understanding what the whole workspace does or locating the implementation of some code. This does not include generating or updating tests.",
            "examples": [
              "What does this project do?"
            ]
          },
          {
            "category": "find_code_in_workspace",
            "description": "The user wants to locate the implementation of some functionality in their current workspace.",
            "examples": [
              "Where is the tree widget implemented?"
            ]
          },
          {
            "category": "generate_with_workspace_context",
            "description": "The user wants to generate code based on multiple files in the workspace and did not specify which files to reference.",
            "examples": [
              "Create a README for this project."
            ]
          }
        ]
      },
      "slashCommand": {
        "name": "tests",
        "description": "Generate unit tests for the selected code",
        "disambiguation": [
          {
            "category": "create_tests",
            "description": "The user wants to generate unit tests.",
            "examples": [
              "Generate tests for my selection using pytest."
            ]
          }
        ]
      },
      "contentReferences": [
        {
          "kind": "reference",
          "reference": {
            "uri": {
              "$mid": 1,
              "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/my_strcmp.c",
              "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/my_strcmp.c",
              "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/my_strcmp.c",
              "scheme": "file"
            },
            "range": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 26,
              "endColumn": 1
            }
          }
        },
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strcmp.c",
            "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strcmp.c",
            "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strcmp.c",
            "scheme": "file"
          }
        }
      ],
      "codeCitations": [],
      "timestamp": 1749453467959,
      "editedFileEvents": [
        {
          "eventKind": 1,
          "uri": {
            "$mid": 1,
            "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isupper.c",
            "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isupper.c",
            "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_str_isupper.c",
            "scheme": "file"
          }
        }
      ]
    },
    {
      "requestId": "request_dab858c7-ba69-4cb7-80d4-2fc724e8662f",
      "message": {
        "parts": [
          {
            "range": {
              "start": 0,
              "endExclusive": 30
            },
            "editorRange": {
              "startLineNumber": 1,
              "startColumn": 1,
              "endLineNumber": 1,
              "endColumn": 31
            },
            "text": "Do the same for strncmp please",
            "kind": "text"
          }
        ],
        "text": "Do the same for strncmp please"
      },
      "variableData": {
        "variables": [
          {
            "kind": "file",
            "id": "vscode.implicit.viewport",
            "name": "file:test_my_strcmp.c",
            "value": {
              "uri": {
                "$mid": 1,
                "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strcmp.c",
                "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strcmp.c",
                "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strcmp.c",
                "scheme": "file"
              },
              "range": {
                "startLineNumber": 41,
                "startColumn": 1,
                "endLineNumber": 59,
                "endColumn": 1
              }
            },
            "modelDescription": "User's current visible code"
          }
        ]
      },
      "response": [
        {
          "value": "Here is a Criterion test file for `my_strncmp`. This covers equality, less/greater, empty strings, NULLs, and length limits, similar to your `my_strcmp` tests.\n\n````c\n",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/",
            "scheme": "file"
          }
        },
        {
          "kind": "codeblockUri",
          "uri": {
            "$mid": 1,
            "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strncmp.c",
            "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strncmp.c",
            "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strncmp.c",
            "scheme": "file"
          }
        },
        {
          "value": "/*\n** EPITECH PROJECT, 2025\n** day06\n** File description:\n** test_my_strncmp\n*/\n\n#include <criterion/criterion.h>\n\nint my_strncmp(char const *s1, char const *s2, int n);\n\nTest(my_strncmp, equal_full_length) {\n    cr_assert_eq(my_strncmp(\"abc\", \"abc\", 3), 0);\n}\n\nTest(my_strncmp, less_full_length) {\n    cr_assert_lt(my_strncmp(\"abc\", \"abd\", 3), 0);\n}\n\nTest(my_strncmp, greater_full_length) {\n    cr_assert_gt(my_strncmp(\"abd\", \"abc\", 3), 0);\n}\n\nTest(my_strncmp, equal_partial_length) {\n    cr_assert_eq(my_strncmp(\"abc\", \"abd\", 2), 0);\n}\n\nTest(my_strncmp, n_zero) {\n    cr_assert_eq(my_strncmp(\"abc\", \"def\", 0), 0);\n}\n\nTest(my_strncmp, both_null) {\n    cr_assert_eq(my_strncmp(NULL, NULL, 3), 0);\n}\n\nTest(my_strncmp, first_null) {\n    cr_assert_eq(my_strncmp(NULL, \"abc\", 1), -'a');\n}\n\nTest(my_strncmp, second_null) {\n    cr_assert_eq(my_strncmp(\"abc\", NULL, 1), 'a');\n}\n\nTest(my_strncmp, empty_strings) {\n    cr_assert_eq(my_strncmp(\"\", \"\", 1), 0);\n}\n\nTest(my_strncmp, first_empty_second_nonempty) {\n    cr_assert_eq(my_strncmp(\"\", \"a\", 1), -'a');\n}\n\nTest(my_strncmp, first_nonempty_second_empty) {\n    cr_assert_eq(my_strncmp(\"a\", \"\", 1), 'a');\n}\n\nTest(my_strncmp, different_lengths) {\n    cr_assert_lt(my_strncmp(\"abc\", \"abcd\", 4), 0);\n    cr_assert_gt(my_strncmp(\"abcd\", \"abc\", 4), 0);\n}\n\nTest(my_strncmp, stop_before_difference) {\n    cr_assert_eq(my_strncmp(\"abc\", \"abd\", 2), 0);\n}\n````",
          "supportThemeIcons": false,
          "supportHtml": false,
          "baseUri": {
            "$mid": 1,
            "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/",
            "scheme": "file"
          }
        }
      ],
      "responseId": "response_e7f5196e-7e92-4198-97a9-779f6d18821b",
      "result": {
        "timings": {
          "firstProgress": 1208,
          "totalElapsed": 4921
        },
        "metadata": {
          "codeBlocks": [
            {
              "code": "/*\n** EPITECH PROJECT, 2025\n** day06\n** File description:\n** test_my_strncmp\n*/\n\n#include <criterion/criterion.h>\n\nint my_strncmp(char const *s1, char const *s2, int n);\n\nTest(my_strncmp, equal_full_length) {\n    cr_assert_eq(my_strncmp(\"abc\", \"abc\", 3), 0);\n}\n\nTest(my_strncmp, less_full_length) {\n    cr_assert_lt(my_strncmp(\"abc\", \"abd\", 3), 0);\n}\n\nTest(my_strncmp, greater_full_length) {\n    cr_assert_gt(my_strncmp(\"abd\", \"abc\", 3), 0);\n}\n\nTest(my_strncmp, equal_partial_length) {\n    cr_assert_eq(my_strncmp(\"abc\", \"abd\", 2), 0);\n}\n\nTest(my_strncmp, n_zero) {\n    cr_assert_eq(my_strncmp(\"abc\", \"def\", 0), 0);\n}\n\nTest(my_strncmp, both_null) {\n    cr_assert_eq(my_strncmp(NULL, NULL, 3), 0);\n}\n\nTest(my_strncmp, first_null) {\n    cr_assert_eq(my_strncmp(NULL, \"abc\", 1), -'a');\n}\n\nTest(my_strncmp, second_null) {\n    cr_assert_eq(my_strncmp(\"abc\", NULL, 1), 'a');\n}\n\nTest(my_strncmp, empty_strings) {\n    cr_assert_eq(my_strncmp(\"\", \"\", 1), 0);\n}\n\nTest(my_strncmp, first_empty_second_nonempty) {\n    cr_assert_eq(my_strncmp(\"\", \"a\", 1), -'a');\n}\n\nTest(my_strncmp, first_nonempty_second_empty) {\n    cr_assert_eq(my_strncmp(\"a\", \"\", 1), 'a');\n}\n\nTest(my_strncmp, different_lengths) {\n    cr_assert_lt(my_strncmp(\"abc\", \"abcd\", 4), 0);\n    cr_assert_gt(my_strncmp(\"abcd\", \"abc\", 4), 0);\n}\n\nTest(my_strncmp, stop_before_difference) {\n    cr_assert_eq(my_strncmp(\"abc\", \"abd\", 2), 0);\n}\n",
              "resource": {
                "$mid": 1,
                "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strncmp.c",
                "scheme": "file"
              },
              "language": "c",
              "markdownBeforeBlock": "Here is a Criterion test file for `my_strncmp`. This covers equality, less/greater, empty strings, NULLs, and length limits, similar to your `my_strcmp` tests.\n\n"
            }
          ],
          "modelMessageId": "b41bfa0a-a05c-48a1-9539-dcfc5d15d7b8",
          "responseId": "efd4f242-d1ff-4985-a711-76f7ec56e2f4",
          "sessionId": "1fa0ba73-ccfa-4fea-bf10-b6466996bb92",
          "agentId": "github.copilot.default"
        }
      },
      "followups": [],
      "isCanceled": false,
      "agent": {
        "extensionId": {
          "value": "GitHub.copilot-chat",
          "_lower": "github.copilot-chat"
        },
        "publisherDisplayName": "GitHub",
        "extensionPublisherId": "GitHub",
        "extensionDisplayName": "GitHub Copilot Chat",
        "id": "github.copilot.default",
        "description": "Ask Copilot",
        "metadata": {
          "themeIcon": {
            "id": "copilot"
          },
          "hasFollowups": true,
          "helpTextPrefix": "You can ask me general programming questions, or chat with the following participants which have specialized expertise and can perform actions:",
          "helpTextVariablesPrefix": "You can also help me understand your question by using the following variables to give me extra context:",
          "helpTextPostfix": {
            "value": "To have a great conversation, ask me questions as if I was a real programmer:\n\n* **Show me the code** you want to talk about by having the files open and selecting the most important lines.\n* **Make refinements** by asking me follow-up questions, adding clarifications, providing errors, etc.\n* **Review my suggested code** and tell me about issues or improvements, so I can iterate on it.\n\nYou can also ask me questions about your editor selection by [starting an inline chat session](command:inlineChat.start).\n\nLearn more about [GitHub Copilot](https://docs.github.com/copilot/using-github-copilot/getting-started-with-github-copilot?tool=vscode&utm_source=editor&utm_medium=chat-panel&utm_campaign=2024q3-em-MSFT-getstarted) in [Visual Studio Code](https://code.visualstudio.com/docs/copilot/overview). Or explore the [Copilot walkthrough](command:github.copilot.open.walkthrough).",
            "isTrusted": {
              "enabledCommands": [
                "inlineChat.start",
                "github.copilot.open.walkthrough"
              ]
            },
            "supportThemeIcons": false,
            "supportHtml": false,
            "uris": {
              "command:inlineChat.start": {
                "$mid": 1,
                "path": "inlineChat.start",
                "scheme": "command"
              },
              "https://docs.github.com/copilot/using-github-copilot/getting-started-with-github-copilot?tool=vscode&utm_source=editor&utm_medium=chat-panel&utm_campaign=2024q3-em-MSFT-getstarted": {
                "$mid": 1,
                "path": "/copilot/using-github-copilot/getting-started-with-github-copilot",
                "scheme": "https",
                "authority": "docs.github.com",
                "query": "tool=vscode&utm_source=editor&utm_medium=chat-panel&utm_campaign=2024q3-em-MSFT-getstarted"
              },
              "https://code.visualstudio.com/docs/copilot/overview": {
                "$mid": 1,
                "path": "/docs/copilot/overview",
                "scheme": "https",
                "authority": "code.visualstudio.com"
              },
              "command:github.copilot.open.walkthrough": {
                "$mid": 1,
                "path": "github.copilot.open.walkthrough",
                "scheme": "command"
              }
            }
          },
          "supportIssueReporting": false,
          "requester": {
            "name": "inkurey-22",
            "icon": {
              "$mid": 1,
              "path": "/u/146175466",
              "scheme": "https",
              "authority": "avatars.githubusercontent.com",
              "query": "v=4"
            }
          }
        },
        "name": "GitHubCopilot",
        "fullName": "GitHub Copilot",
        "isDefault": true,
        "locations": [
          "panel"
        ],
        "modes": [
          "ask"
        ],
        "slashCommands": [],
        "disambiguation": [
          {
            "category": "generate_code_sample",
            "description": "The user wants to generate code snippets without referencing the contents of the current workspace. This category does not include generating entire projects.",
            "examples": [
              "Write an example of computing a SHA256 hash."
            ]
          },
          {
            "category": "add_feature_to_file",
            "description": "The user wants to change code in a file that is provided in their request, without referencing the contents of the current workspace. This category does not include generating entire projects.",
            "examples": [
              "Add a refresh button to the table widget."
            ]
          },
          {
            "category": "question_about_specific_files",
            "description": "The user has a question about a specific file or code snippet that they have provided as part of their query, and the question does not require additional workspace context to answer.",
            "examples": [
              "What does this file do?"
            ]
          }
        ]
      },
      "contentReferences": [
        {
          "kind": "reference",
          "reference": {
            "$mid": 1,
            "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strcmp.c",
            "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strcmp.c",
            "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strcmp.c",
            "scheme": "file"
          }
        }
      ],
      "codeCitations": [],
      "timestamp": 1749453498051,
      "editedFileEvents": [
        {
          "eventKind": 3,
          "uri": {
            "$mid": 1,
            "fsPath": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strcmp.c",
            "external": "file:///home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strcmp.c",
            "path": "/home/curry/Workspace/SEM1/POOL/PART1/day06/tests/test_my_strcmp.c",
            "scheme": "file"
          }
        }
      ]
    }
  ],
  "sessionId": "585c0dc7-572e-4585-a6b2-1fd42a131c67",
  "creationDate": 1749404048245,
  "isImported": false,
  "lastMessageDate": 1749453498051,
  "customTitle": "Testing my_str_isnum function with Criterion"
}